{"version":3,"sources":["TapeComponent.js","TransitionTableComponent.js","ControlComponent.js","TuringMachineComponent.js","index.js"],"names":["TapeComponent","_ref","tape","headPosition","setTape","currentState","setHeadPosition","setCurrentState","moveHeadLeft","prevPosition","moveHeadRight","length","_jsx","className","children","map","cell","index","_jsxs","concat","onClick","newTape","_toConsumableArray","currentValue","updateTapeAtPosition","disabled","TransitionTableComponent","transitionTable","setTransitionTable","handleTransitionChange","state","symbol","field","value","updatedTable","_objectSpread","Object","keys","deleteState","style","marginRight","_transitionTable$stat","_transitionTable$stat2","_transitionTable$stat3","newState","onChange","e","target","s","write","move","newStateName","newTransitions","_defineProperty","ControlComponent","step","reset","TuringMachineComponent","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","tapeValue","transition","console","log","updatedTape","toLowerCase","error","warn","Math","floor","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"wOA8CeA,EA3CO,SAAHC,GAAyF,IAAnFC,EAAID,EAAJC,KAAMC,EAAYF,EAAZE,aAAcC,EAAOH,EAAPG,QAASC,EAAYJ,EAAZI,aAA+BC,GAAFL,EAAfM,gBAAgCN,EAAfK,iBAQ3EE,EAAe,WACbL,EAAe,GACfG,GAAgB,SAAAG,GAAY,OAAIA,EAAe,CAAC,GAExD,EAEMC,EAAgB,WACdP,EAAeD,EAAKS,OAAS,GAC7BL,GAAgB,SAAAG,GAAY,OAAIA,EAAe,CAAC,GAExD,EAEA,OACIG,cAAA,OAAKC,UAAU,OAAMC,SAChBZ,EAAKa,KAAI,SAACC,EAAMC,GAAK,OAClBC,eAAA,OAAiBL,UAAU,iBAAgBC,SAAA,CACvCF,cAAA,OACIC,UAAS,QAAAM,OAAUhB,IAAiBc,EAAQ,SAAW,IACvDG,QAAS,kBAzBA,SAACH,GAC1B,IAAMI,EAAOC,YAAOpB,GACdqB,EAAeF,EAAQJ,GAC7BI,EAAQJ,GAA0B,MAAjBM,EAAuB,IAAwB,MAAjBA,EAAuB,IAAM,IAC5EnB,EAAQiB,EACZ,CAoBmCG,CAAqBP,EAAM,EAACH,SAE1CE,IAEJb,IAAiBc,GAASL,cAAA,OAAKC,UAAU,gBAAeC,SAAET,GAAgB,OAC1EF,IAAiBc,GACdC,eAAA,OAAKL,UAAU,gBAAeC,SAAA,CAC1BF,cAAA,UAAQQ,QAASZ,EAAciB,SAA2B,IAAjBtB,EAAmBW,SAAC,MAC7DF,cAAA,UAAQQ,QAASV,EAAee,SAAUtB,IAAiBD,EAAKS,OAAS,EAAEG,SAAC,WAX9EG,EAcJ,KAItB,E,cCsCeS,EA/EkB,SAAHzB,GAAiD,IAA3C0B,EAAe1B,EAAf0B,gBAAiBC,EAAkB3B,EAAlB2B,mBAC3CC,EAAyB,SAACC,EAAOC,EAAQC,EAAOC,GAClD,IAAMC,EAAYC,YAAA,GAAQR,GACrBO,EAAaJ,KACdI,EAAaJ,GAAS,CAAC,GAEtBI,EAAaJ,GAAOC,KACrBG,EAAaJ,GAAOC,GAAU,CAAC,GAEnCG,EAAaJ,GAAOC,GAAQC,GAASC,EACrCL,EAAmBM,EACvB,EAsBA,OACIhB,eAAA,OAAKL,UAAU,mBAAkBC,SAAA,CAC5BsB,OAAOC,KAAKV,GAAiBZ,KAAI,SAAAe,GAAK,OACnCZ,eAAA,OAAiBL,UAAU,YAAWC,SAAA,CAClCF,cAAA,UAAQQ,QAAS,kBAVb,SAACU,GACjB,IAAMI,EAAYC,YAAA,GAAQR,UACnBO,EAAaJ,GACpBF,EAAmBM,EACvB,CAMuCI,CAAYR,EAAM,EAAES,MAAO,CAACC,YAAa,OAAO1B,SAAC,MACxEF,cAAA,OAAKC,UAAU,aAAYC,SAAEgB,IAC5B,CAAC,IAAK,IAAK,KAAKf,KAAI,SAAAgB,GAAM,IAAAU,EAAAC,EAAAC,EAAA,OACvBzB,eAAA,OAAkBL,UAAU,aAAYC,SAAA,CACpCI,eAAA,OAAKL,UAAU,QAAOC,SAAA,CAAC,MAAIiB,EAAO,OAClCnB,cAAA,UACIqB,OAAqC,QAA9BQ,EAAAd,EAAgBG,GAAOC,UAAO,IAAAU,OAAA,EAA9BA,EAAgCG,WAAY,GACnDC,SAAU,SAAAC,GAAC,OAAIjB,EAAuBC,EAAOC,EAAQ,WAAYe,EAAEC,OAAOd,MAAM,EAACnB,SAGhFsB,OAAOC,KAAKV,GAAiBZ,KAAI,SAAAiC,GAAC,OAC/BpC,cAAA,UAAgBqB,MAAOe,EAAElC,SAAEkC,GAAdA,EAAyB,MAI9CpC,cAAA,UACIqB,OAAqC,QAA9BS,EAAAf,EAAgBG,GAAOC,UAAO,IAAAW,OAAA,EAA9BA,EAAgCO,QAASlB,EAChDc,SAAU,SAAAC,GAAC,OAAIjB,EAAuBC,EAAOC,EAAQ,QAASe,EAAEC,OAAOd,MAAM,EAACnB,SAE7E,CAAC,IAAK,IAAK,KAAKC,KAAI,SAAAkB,GAAK,OACtBrB,cAAA,UAAoBqB,MAAOA,EAAMnB,SAAEmB,GAAtBA,EAAqC,MAK1Df,eAAA,UACIe,OAAqC,QAA9BU,EAAAhB,EAAgBG,GAAOC,UAAO,IAAAY,OAAA,EAA9BA,EAAgCO,OAAQ,GAC/CL,SAAU,SAAAC,GAAC,OAAIjB,EAAuBC,EAAOC,EAAQ,OAAQe,EAAEC,OAAOd,MAAM,EAACnB,SAAA,CAE7EF,cAAA,UAAQqB,MAAM,GAAEnB,SAAC,SACjBF,cAAA,UAAQqB,MAAM,IAAGnB,SAAC,SAClBF,cAAA,UAAQqB,MAAM,IAAGnB,SAAC,eA5BhBiB,EA8BJ,MAlCJD,EAoCJ,IAEVlB,cAAA,UAAQQ,QA7DC,WACb,IAAM+B,EAAe,IAAMf,OAAOC,KAAKV,GAAiBhB,OAGlDyC,EAAiB,CACnB,EAAK,CAAEH,MAAO,IAAKC,KAAM,GAAIN,SAAUO,GACvC,EAAK,CAAEF,MAAO,IAAKC,KAAM,GAAIN,SAAUO,GACvC,EAAK,CAAEF,MAAO,IAAKC,KAAM,GAAIN,SAAUO,IAGrCjB,EAAYC,wBAAA,GAAQR,GAAe,GAAA0B,YAAA,GAAGF,EAAeC,IAC3DxB,EAAmBM,EACvB,EAiDkCpB,SAAC,gBAGvC,ECpEewC,EATU,SAAHrD,GAAyB,IAAnBsD,EAAItD,EAAJsD,KAAMC,EAAKvD,EAALuD,MAC9B,OACItC,eAAA,OAAKL,UAAU,WAAUC,SAAA,CACrBF,cAAA,UAAQQ,QAASmC,EAAKzC,SAAC,SACvBF,cAAA,UAAQQ,QAASoC,EAAM1C,SAAC,YAGpC,EC0Ee2C,EA9EgB,WAC3B,IAAAC,EAAwBC,mBAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAKC,EAAAC,YAAAH,EAAA,GAApIxD,EAAI0D,EAAA,GAAExD,EAAOwD,EAAA,GACpBE,EAAwCH,mBAAS,MAAKI,EAAAF,YAAAC,EAAA,GAA/CzD,EAAY0D,EAAA,GAAExD,EAAewD,EAAA,GACpCC,EAAwCL,mBAAS,GAAEM,EAAAJ,YAAAG,EAAA,GAA5C7D,EAAY8D,EAAA,GAAE3D,EAAe2D,EAAA,GAGpCC,EAA8CP,mBAAS,CACnD,GAAM,CACF,EAAK,CAAC,EACN,EAAK,CAAC,KAEZQ,EAAAN,YAAAK,EAAA,GALKvC,EAAewC,EAAA,GAAEvC,EAAkBuC,EAAA,GA+D5C,OACIjD,eAAA,OAAAJ,SAAA,CACIF,cAACZ,EAAa,CAACE,KAAMA,EAAMC,aAAcA,EAAcC,QAASA,EAASE,gBAAiBA,EAAiBD,aAAcA,IACzHO,cAACc,EAAwB,CAACC,gBAAiBA,EAAiBC,mBAAoBA,IAChFhB,cAAC0C,EAAgB,CAACC,KA1DT,WAEf,IAAMa,EAAYlE,EAAKC,GAIjBkE,EAAa1C,EAAgBtB,IAAiBsB,EAAgBtB,GAAc+D,GAGlF,GAAKC,GAYL,GAPAC,QAAQC,IAAI,iBAAkBlE,GAC9BiE,QAAQC,IAAI,yBAA0BH,GACtCE,QAAQC,IAAI,+BAAgCF,EAAWnB,MAKlDmB,EAAL,CAGA,GAAIA,EAAWpB,MAAO,CACpB,IAAMuB,EAAWlD,YAAOpB,GACxBsE,EAAYrE,GAAgBkE,EAAWpB,MACvC7C,EAAQoE,EACV,CAGIH,EAAWnB,QAC0B,SAAlCmB,EAAWnB,KAAKuB,eAA8D,MAAlCJ,EAAWnB,KAAKuB,gBAA0BtE,EAAe,EACxGG,GAAgB,SAAAG,GAAY,OAAIA,EAAe,CAAC,KACJ,UAAlC4D,EAAWnB,KAAKuB,eAA+D,MAAlCJ,EAAWnB,KAAKuB,gBAA0BtE,EAAeD,EAAKS,OAAS,GAC9HL,GAAgB,SAAAG,GAAY,OAAIA,EAAe,CAAC,KAKhDkB,EAAgB0C,EAAWzB,UAC3BrC,EAAgB8D,EAAWzB,UAE3B0B,QAAQI,MAAM,8CAA+CL,EAAWzB,SAtBrD,OAXnB0B,QAAQK,KAAK,wCAADxD,OAAyCd,EAAY,oBAAAc,OAAmBjB,EAAKC,IAqC/F,EAW4CqD,MAT9B,WACZjD,EAAgB,MAChBD,EAAgBsE,KAAKC,MAAM3E,EAAKS,OAAS,GAAG,EAC9C,MASF,EC5EAmE,IAASC,OACPnE,cAACoE,IAAMC,WAAU,CAAAnE,SACfF,cAAC6C,EAAsB,MAEzByB,SAASC,eAAe,Q","file":"static/js/main.ae68b14c.chunk.js","sourcesContent":["\nimport React from 'react';\n\nconst TapeComponent = ({ tape, headPosition, setTape, currentState, setCurrentState, setHeadPosition }) => {\n    const updateTapeAtPosition = (index) => {\n        const newTape = [...tape];\n        const currentValue = newTape[index];\n        newTape[index] = currentValue === '0' ? '1' : (currentValue === '1' ? '_' : '0');\n        setTape(newTape);\n    }\n\n    const moveHeadLeft = () => {\n        if (headPosition > 0) {\n            setHeadPosition(prevPosition => prevPosition - 1);\n        }\n    };\n\n    const moveHeadRight = () => {\n        if (headPosition < tape.length - 1) {\n            setHeadPosition(prevPosition => prevPosition + 1);\n        }\n    };\n\n    return (\n        <div className=\"tape\">\n            {tape.map((cell, index) => (\n                <div key={index} className=\"cell-container\">\n                    <div \n                        className={`cell ${headPosition === index ? 'active' : ''}`} \n                        onClick={() => updateTapeAtPosition(index)}\n                    >\n                        {cell}\n                    </div>\n                    {headPosition === index && <div className=\"state-display\">{currentState || 's0'}</div>}\n                    {headPosition === index && \n                        <div className=\"tape-controls\">\n                            <button onClick={moveHeadLeft} disabled={headPosition === 0}>&lt;</button>\n                            <button onClick={moveHeadRight} disabled={headPosition === tape.length - 1}>&gt;</button>\n                        </div>\n                    }\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default TapeComponent;\n","\nimport React from 'react';\n\nconst TransitionTableComponent = ({ transitionTable, setTransitionTable }) => {\n    const handleTransitionChange = (state, symbol, field, value) => {\n        const updatedTable = { ...transitionTable };\n        if (!updatedTable[state]) {\n            updatedTable[state] = {};\n        }\n        if (!updatedTable[state][symbol]) {\n            updatedTable[state][symbol] = {};\n        }\n        updatedTable[state][symbol][field] = value;\n        setTransitionTable(updatedTable);\n    };\n\n    const addState = () => {\n        const newStateName = \"s\" + Object.keys(transitionTable).length;\n\n        // Set default values for the new state\n        const newTransitions = {\n            '0': { write: '0', move: '', newState: newStateName },\n            '1': { write: '1', move: '', newState: newStateName },\n            '_': { write: '_', move: '', newState: newStateName }\n        };\n\n        const updatedTable = { ...transitionTable, [newStateName]: newTransitions };\n        setTransitionTable(updatedTable);\n    };\n\n    const deleteState = (state) => {\n        const updatedTable = { ...transitionTable };\n        delete updatedTable[state];\n        setTransitionTable(updatedTable);\n    };\n\n    return (\n        <div className=\"transition-table\">\n            {Object.keys(transitionTable).map(state => (\n                <div key={state} className=\"state-row\">\n                    <button onClick={() => deleteState(state)} style={{marginRight: \"5px\"}}>x</button>\n                    <div className=\"state-name\">{state}</div>\n                    {['0', '1', '_'].map(symbol => (\n                        <div key={symbol} className=\"transition\">\n                            <div className=\"label\">On {symbol}:</div>\n                            <select\n                                value={transitionTable[state][symbol]?.newState || ''}\n                                onChange={e => handleTransitionChange(state, symbol, 'newState', e.target.value)}\n                            >\n                                \n                                {Object.keys(transitionTable).map(s => (\n                                    <option key={s} value={s}>{s}</option>\n                                ))}\n                            </select>\n                            \n                            <select\n                                value={transitionTable[state][symbol]?.write || symbol}\n                                onChange={e => handleTransitionChange(state, symbol, 'write', e.target.value)}\n                            >\n                                {['0', '1', '_'].map(value => (\n                                    <option key={value} value={value}>{value}</option>\n                                ))}\n                            </select>\n\n\n                            <select\n                                value={transitionTable[state][symbol]?.move || ''}\n                                onChange={e => handleTransitionChange(state, symbol, 'move', e.target.value)}\n                            >\n                                <option value=\"\">Move</option>\n                                <option value=\"L\">Left</option>\n                                <option value=\"R\">Right</option>\n                            </select>\n                        </div>\n                    ))}\n                </div>\n            ))}\n            <button onClick={addState}>Add State</button>\n        </div>\n    );\n}\n\nexport default TransitionTableComponent;\n","\nimport React from 'react';\n\nconst ControlComponent = ({ step, reset }) => {\n    return (\n        <div className=\"controls\">\n            <button onClick={step}>Step</button>\n            <button onClick={reset}>Reset</button>\n        </div>\n    );\n}\n\nexport default ControlComponent;\n            ","\nimport React, { useState } from 'react';\nimport TapeComponent from './TapeComponent';\nimport TransitionTableComponent from './TransitionTableComponent';\nimport ControlComponent from './ControlComponent';\n\nconst TuringMachineComponent = () => {\n    const [tape, setTape] = useState([\"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\"]);\n    const [currentState, setCurrentState] = useState(\"s0\");\n    const [headPosition, setHeadPosition] = useState(9); // starting in the middle of the tape for demonstration\n    \n    // Initialize the transitionTable with a default state\n    const [transitionTable, setTransitionTable] = useState({\n        \"s0\": {\n            \"0\": {},\n            \"1\": {}\n        }\n    });\n\n    \n  \nconst handleStep = () => {\n    // Read the tape value under the head\n    const tapeValue = tape[headPosition];    \n\n    // Find the transition that matches the current state and tape value\n    \n    const transition = transitionTable[currentState] && transitionTable[currentState][tapeValue];\n\n    // If no valid transition rule is found, exit the function\n    if (!transition) {\n        console.warn(`No transition rule defined for state ${currentState} and tape value ${tape[headPosition]}`);\n        return;\n    }\n    \n    console.log(\"Current State:\", currentState);\n    console.log(\"Tape Value under Head:\", tapeValue);\n    console.log(\"Transition Move Instruction:\", transition.move);\n\n\n\n    // If no transition is found, we can't proceed\n    if (!transition) return;\n\n    // Write action\n    if (transition.write) {\n      const updatedTape = [...tape];\n      updatedTape[headPosition] = transition.write;\n      setTape(updatedTape);\n    }\n\n    // Move action\n    if (transition.move) {\n      if ((transition.move.toLowerCase() === \"left\" || transition.move.toLowerCase() === \"l\") && headPosition > 0) {\n        setHeadPosition(prevPosition => prevPosition - 1);\n      } else if ((transition.move.toLowerCase() === \"right\" || transition.move.toLowerCase() === \"r\") && headPosition < tape.length - 1) {\n        setHeadPosition(prevPosition => prevPosition + 1);\n      }\n    }\n\n    \n    if (transitionTable[transition.newState]) {\n        setCurrentState(transition.newState);\n    } else {\n        console.error(\"The transition leads to an undefined state:\", transition.newState);\n        return;\n    }\n    \n  };\n\n  const reset = () => {\n    setCurrentState('s0'); // Reset the current state to s0\n    setHeadPosition(Math.floor(tape.length / 2)-1); // Optional: Reset the head to the middle position of the tape\n  };  \n\n  return (\n      <div>\n          <TapeComponent tape={tape} headPosition={headPosition} setTape={setTape} setHeadPosition={setHeadPosition} currentState={currentState} />\n          <TransitionTableComponent transitionTable={transitionTable} setTransitionTable={setTransitionTable} />\n          <ControlComponent step={handleStep} reset={reset} />\n      </div>\n  );\n}\n\nexport default TuringMachineComponent;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport TuringMachineComponent from './TuringMachineComponent';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TuringMachineComponent />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}